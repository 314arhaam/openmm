pipeline {
    agent none

    stages {
        stage("Build and test") {
            parallel {
                stage("Build and test CUDA platform") {
                    agent {
                        docker {
                            image "swails/openmm-all:latest"
                            label "cuda && docker"
                            alwaysPull true
                        }
                    }
                    steps {
                        sh "git clean -fxd && git checkout ."
                        withEnv(["OPENMM_CUDA_COMPILER=/usr/local/cuda/bin/nvcc"]) {
                            sh "bash -e devtools/ci/jenkins/install.sh"
                            sh "bash -e devtools/ci/jenkins/test.sh -R 'TestCuda' --parallel 2"
                        }
                    }
                }

                stage("Build and test OpenCL platform") {
                    agent {
                        docker {
                            image "swails/openmm-all:latest"
                            label "cuda && docker"
                            alwaysPull true
                        }
                    }
                    steps {
                        sh "git clean -fxd && git checkout ."
                        sh "bash -e devtools/ci/jenkins/install.sh"
                        sh "bash -e devtools/ci/jenkins/test.sh -R 'TestCuda' --parallel 2"
                    }
                }

                stage("Build/test CPU platforms") {
                    agent {
                        docker {
                            image "swails/openmm-all:latest"
                            label "docker"
                            alwaysPull true
                        }
                    }

                    steps {
                        sh "git clean -fxd && git checkout ."
                        sh "bash -e devtools/ci/jenkins/install.sh"
                        sh "bash -e devtools/ci/jenkins/test.sh -R 'TestCuda' --parallel 2"
                    }
                }
            }
        }
    }
}
