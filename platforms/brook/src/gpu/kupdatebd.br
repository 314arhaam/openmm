
/* -------------------------------------------------------------------------- *
 *                                   OpenMM                                   *
 * -------------------------------------------------------------------------- *
 * This is part of the OpenMM molecular simulation toolkit originating from   *
 * Simbios, the NIH National Center for Physics-Based Simulation of           *
 * Biological Structures at Stanford, funded under the NIH Roadmap for        *
 * Medical Research, grant U54 GM072970. See https://simtk.org.               *
 *                                                                            *
 * Portions copyright (c) 2008 Stanford University and the Authors.           *
 * Authors: Peter Eastman, Mark Friedrichs, Chris Bruns                       *
 * Contributors:                                                              *
 *                                                                            *
 * Permission is hereby granted, free of charge, to any person obtaining a    *
 * copy of this software and associated documentation files (the "Software"), *
 * to deal in the Software without restriction, including without limitation  *
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,   *
 * and/or sell copies of the Software, and to permit persons to whom the      *
 * Software is furnished to do so, subject to the following conditions:       *
 *                                                                            *
 * The above copyright notice and this permission notice shall be included in *
 * all copies or substantial portions of the Software.                        *
 *                                                                            *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    *
 * THE AUTHORS, CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,    *
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR      *
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE  *
 * USE OR OTHER DEALINGS IN THE SOFTWARE.                                     *
 * -------------------------------------------------------------------------- */

/*
 * Brownian dynamics integration
 *
 * @param xstrwidth      atom stream width
 * @param gstrwidth      Gaussian stream width
 * @param goffset        Gaussian offset into stream
 * @param forceScale     force scale factor
 * @param noiseAmplitude noise amplitude
 * @param fgauss         random numbers
 * @param pos            atom positions
 * @param force          force
 * @param posp           delta positions
 *
 **/

kernel void kintegrate_bd( float xstrwidth, float gstrwidth, float goffset, 
                           float forceScale, float noiseAmplitude, float3 fgauss[][],
                           float3 pos<>, float3 force<>, out float3 posp<> ){

   // ---------------------------------------------------------------------------------------

   float3 fg1;
   float linind_gauss; //linear index into the random numbers
   float2 igauss;      //2d index

   // ---------------------------------------------------------------------------------------

   igauss       = indexof( pos );
   linind_gauss = igauss.y * xstrwidth + igauss.x;
   linind_gauss = linind_gauss + goffset;    
   
   igauss.y     = round( (linind_gauss - fmod( linind_gauss, gstrwidth))/gstrwidth);
   igauss.x     = linind_gauss - igauss.y * gstrwidth;

   fg1          = fgauss[ igauss ];

   posp         = forceScale*force + noiseAmplitude*fg1;
}

/*
 * Brownian dynamics update
 *
 * @param velocityScale  velocity scale
 * @param posp           atom positions
 * @param posIn          atom positions
 * @param velocity       velocity
 * @param posp           delta positions
 *
 **/

kernel void kupdate_bd( float velocityScale,
                        float3 posp<>, float3 posIn<>, out float3 velocity<>, out float3 posOut<> ){

   // ---------------------------------------------------------------------------------------

   // ---------------------------------------------------------------------------------------

   velocity    = velocityScale*( posp - posIn );
   posOut      = posp;
}

/*
 * Brownian dynamics update
 *
 * @param velocityScale  velocity scale
 * @param posp           atom positions
 * @param posIn          atom positions
 * @param velocity       velocity
 * @param posp           delta positions
 *
 **/

kernel void kupdate_bd2( float velocityScale,
                         float3 posp<>, float3 posIn<>, out float3 velocity<>, out float3 posOut<> ){

   // ---------------------------------------------------------------------------------------

   // ---------------------------------------------------------------------------------------

   velocity    = velocityScale*posp;
   posOut      = posIn + posp;
}

