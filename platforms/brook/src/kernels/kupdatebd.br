
/* -------------------------------------------------------------------------- *
 *                                   OpenMM                                   *
 * -------------------------------------------------------------------------- *
 * This is part of the OpenMM molecular simulation toolkit originating from   *
 * Simbios, the NIH National Center for Physics-Based Simulation of           *
 * Biological Structures at Stanford, funded under the NIH Roadmap for        *
 * Medical Research, grant U54 GM072970. See https://simtk.org.               *
 *                                                                            *
 * Portions copyright (c) 2009 Stanford University and the Authors.           *
 * Authors: Mark Friedrichs, Mike Houston                                     *
 * Contributors:                                                              *
 *                                                                            *
 * This program is free software: you can redistribute it and/or modify       *
 * it under the terms of the GNU Lesser General Public License as published   *
 * by the Free Software Foundation, either version 3 of the License, or       *
 * (at your option) any later version.                                        *
 *                                                                            *
 * This program is distributed in the hope that it will be useful,            *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              *
 * GNU Lesser General Public License for more details.                        *
 *                                                                            *
 * You should have received a copy of the GNU Lesser General Public License   *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.      *
 * -------------------------------------------------------------------------- */

/*
 * Brownian dynamics integration
 *
 * @param xstrwidth      atom stream width
 * @param gstrwidth      Gaussian stream width
 * @param goffset        Gaussian offset into stream
 * @param forceScale     force scale factor
 * @param noiseAmplitude noise amplitude
 * @param fgauss         random numbers
 * @param pos            atom positions
 * @param force          force
 * @param posp           delta positions
 *
 **/

kernel void kintegrate_bd( float xstrwidth, float gstrwidth, float goffset, 
                           float forceScale, float noiseAmplitude, float3 fgauss[][],
                           float3 pos<>, float3 force<>, out float3 posp<> ){

   // ---------------------------------------------------------------------------------------

   float3 fg1;
   float linind_gauss; //linear index into the random numbers
   float2 igauss;      //2d index

   // ---------------------------------------------------------------------------------------

   igauss       = indexof( pos );
   linind_gauss = igauss.y * xstrwidth + igauss.x;
   linind_gauss = linind_gauss + goffset;    
   
   igauss.y     = round( (linind_gauss - fmod( linind_gauss, gstrwidth))/gstrwidth);
   igauss.x     = linind_gauss - igauss.y * gstrwidth;

   fg1          = fgauss[ igauss ];

   posp         = forceScale*force + noiseAmplitude*fg1;
}

/*
 * Brownian dynamics update
 *
 * @param velocityScale  velocity scale
 * @param posp           atom positions
 * @param posIn          atom positions
 * @param velocity       velocity
 * @param posp           delta positions
 *
    rfac     = sqrt(2.0*BOLTZ*temp/(fr*dt));
    invfr    = 1.0/fr;
 vn          = invfr*f[n][d] + rfac*fgauss(&jran);
v[n][d]      = vn;
xprime[n][d] = x[n][d]+vn*dt;
 **/

kernel void kupdate_bd( float velocityScale,
                        float3 posp<>, float3 posIn<>, out float3 velocity<>, out float3 posOut<> ){

   // ---------------------------------------------------------------------------------------

   // ---------------------------------------------------------------------------------------

   velocity    = velocityScale*( posp - posIn );
   posOut      = posp;
}

/*
 * Brownian dynamics update (no Shake)
 *
 * @param velocityScale  velocity scale
 * @param posp           atom positions
 * @param posIn          atom positions
 * @param velocity       velocity
 * @param posp           delta positions
 *
 **/

kernel void kupdate_bd2( float velocityScale,
                         float3 posp<>, float3 posIn<>, out float3 velocity<>, out float3 posOut<> ){

   // ---------------------------------------------------------------------------------------

   // ---------------------------------------------------------------------------------------

   velocity    = velocityScale*posp;
   posOut      = posIn + posp;
}

